---

- name: create tmeporary storage paths
  file: state=directory path={{hypervisor_image_path}}/khaleesi_provisioner/{{tmp.node_prefix}}

# handle images
- name: download image if not in cache (this may take a long time)
  get_url: url={{ item.value.image_url }} dest={{hypervisor_image_path}}/khaleesi_provisioner/image-cache/{{item.value.image_name}}
  with_dict: nodes
  when: item.value.create_empty | default(false) == false

- name: copy image from cache
  command: cp {{hypervisor_image_path}}/khaleesi_provisioner/image-cache/{{item.value.image_name}} {{hypervisor_image_path}}/khaleesi_provisioner/{{tmp.node_prefix}}/{{item.value.name}}.qcow2
  with_dict: nodes
  when: item.value.create_empty | default(false) == false

- name: resize image for nodes with source image specified
  command: qemu-img resize {{hypervisor_image_path}}/khaleesi_provisioner/{{tmp.node_prefix}}/{{ item.value.name }}.qcow2 +{{item.value.flavor.size}}
  with_dict: nodes
  when: item.value.create_empty | default(false) == false

- name: Create empty VM images for nodes without source image
  command: qemu-img create {{hypervisor_image_path}}/khaleesi_provisioner/{{tmp.node_prefix}}/{{ item.value.name }}.qcow2 {{item.value.flavor.size}} -f qcow2 -o preallocation=metadata
  with_dict: nodes
  when: item.value.create_empty | default(false) == true

- name: "move images to  default libvirt image path: {{hypervisor_image_path}}"
  command: mv {{hypervisor_image_path}}/khaleesi_provisioner/{{tmp.node_prefix}}/{{ item.value.name }}.qcow2 {{hypervisor_image_path}}
  with_dict: nodes


# Generate cloud init configuration CD
- name: create cloud-init temp dir 
  file: state=directory path={{hypervisor_image_path}}/khaleesi_provisioner/{{tmp.node_prefix}}/cloud-init-{{item.value.name}}
  with_dict: nodes
  when: item.value.create_empty | default(false) == false

- name: get meta-data template
  template: src=meta-data.j2 dest={{hypervisor_image_path}}/khaleesi_provisioner/{{tmp.node_prefix}}/cloud-init-{{item.value.name}}/meta-data
  with_dict: nodes
  when: item.value.create_empty | default(false) == false

- name: get user-data template
  template: src=user-data.j2 dest={{hypervisor_image_path}}/khaleesi_provisioner/{{tmp.node_prefix}}/cloud-init-{{item.value.name}}/user-data
  with_dict: nodes
  when: item.value.create_empty | default(false) == false

- name: generate cloud-init iso
  command: chdir={{hypervisor_image_path}}/khaleesi_provisioner/{{tmp.node_prefix}}/cloud-init-{{item.value.name}}/
       genisoimage -output {{hypervisor_image_path}}/khaleesi_provisioner/{{tmp.node_prefix}}/{{ item.value.name}}-cloudinit.iso -volid cidata -joliet -rock user-data meta-data
  with_dict: nodes
  when: item.value.create_empty | default(false) == false

- name: move cloud init to /var/lib/libvirt/images
  command: mv {{hypervisor_image_path}}/khaleesi_provisioner/{{tmp.node_prefix}}/{{ item.value.name}}-cloudinit.iso {{hypervisor_image_path}}
  with_dict: nodes
  when: item.value.create_empty | default(false) == false

# Cleanup
- name: Clear temporary storage path
  file: state=absent path={{hypervisor_image_path}}/khaleesi_provisioner/{{tmp.node_prefix}}

# Create nodes
- name: Create VMs
  virt: name={{ item.value.name }}
        command=define
        xml="{{ lookup('template', '../templates/guest.xml.j2') }}"
  with_dict: nodes

- name: Start not empty VMs
  virt: name={{ item.value.name }}
        state=running
  with_dict: nodes
  when: item.value.create_empty | default(false) == false
  register: new_nodes

- name: wait for guests to come up and contact dnsmasq with correct fqdn
  pause: minutes=2
  when: new_nodes| changed

- name: get IP of spawned non empty libvirt guests
  command: dig +short {{ item.value.fqdn }} @{{ provisioner.network.nic.net_1.ip_address }}
  with_dict: nodes
  when: item.value.create_empty | default(false) == false
  register: guest_ips

- name: add guest ip static resolution  into libvirt host /etc/hosts
  lineinfile: dest=/etc/hosts state=present
        regexp={{ item.item.value.fqdn }}
        line="{{item.stdout}}   {{ item.item.value.fqdn }}"
  with_items: guest_ips.results
  when: item.skipped is not defined

- add_host:
    name="{{ item.item.value.name }}"
    groups="{{ item.item.value.groups
        if item.item.value.groups is string
        else item.item.value.groups| join(',') }}"
    ansible_fqdn="{{ item.item.value.fqdn }}"
    ansible_ssh_user="{{ item.item.value.remote_user }}"
    ansible_ssh_private_key_file="{{ hostvars["localhost"].key_file }}"
    ansible_ssh_host="{{ item.item.value.name  }}"
  with_items: guest_ips.results
  when: item.skipped is not defined
