---
- name: Provision nodes
  nova_compute:
       auth_url: "{{ os_auth_url }}"
       state: present
       login_username: "{{ os_username }}"
       login_password: "{{ os_password }}"
       login_tenant_name: "{{ os_tenant_name }}"
       name: "{{ item.name }}"
       image_id: "{{ item.image_id }}"
       key_name: "{{ item.key_name }}"
       wait_for: "{{ wait_for_boot }}"
       flavor_id: "{{ item.flavor_id }}"
       nics: "{{ item.network_ids }}"
  register: new_nodes
  with_items: nodes

- name: Print host openstack network type (nova/neutron)
  debug: var=os_network_type

- name: Assign floating ip (neutron network)
  neutron_floating_ip:
       auth_url: "{{ os_auth_url }}"
       state: present
       login_username: "{{ os_username }}"
       login_password: "{{ os_password }}"
       login_tenant_name: "{{ os_tenant_name }}"
       network_name: "{{ floating_network_name }}"
       instance_name: "{{ item.name }}"
       internal_network_name: default
  when: '"{{os_network_type}}" == "neutron"'
  register: neutron_floating_ips
  retries: 2
  delay: 10
  until: neutron_floating_ips.public_ip is defined
  with_items: nodes

- name: Assign floating ip (nova network)
  nova_floating_ip:
       auth_url: "{{ os_auth_url }}"
       state: present
       login_username: "{{ os_username }}"
       login_password: "{{ os_password }}"
       login_tenant_name: "{{ os_tenant_name }}"
       network_name: "{{ floating_network_name }}"
       instance_name: "{{ item.name }}"
  when: '"{{os_network_type}}" == "nova"'
  retries: 3
  delay: 10
  until: nova_floating_ips.public_ip is defined
  register: nova_floating_ips
  with_items: nodes


- { include: add_hosts.yml,
    nodes_created: "{{ new_nodes.results }}",
    floating_ips: " {{ nova_floating_ips.results }}",
    when: '"{{os_network_type}}" == "nova"'
  }

- { include: add_hosts.yml,
    nodes_created: "{{ new_nodes.results }}",
    floating_ips: "{{ neutron_floating_ips.results}}",
    when: '"{{os_network_type}}" == "neutron"'
  }

- name: Pause to let the systems boot
  pause: seconds="{{ wait_for_boot }}"
  when: new_nodes|changed

#note: bug w/ delay var: https://github.com/ansible/ansible/issues/5031
- name: Ping public IP's of nodes
  command: "ping -c 3 {{ hostvars[item].public_ip }}"
  register: result
  retries: 6
  delay: 10
  until: result.rc == 0
  with_items: groups.openstack_nodes

