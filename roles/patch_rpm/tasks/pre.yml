- name: Install release tool
  sudo: yes
  command: "yum localinstall -y {{ product.rpm }}"

- name: Execute rhos-release for packstack poodle/puddle
  sudo: yes
  command: "rhos-release {{ product.full_version|int }} {{ product.repo.rhos_release.extra_args|join(' ') }}"

- name: Install epel release
  sudo: yes
  command: "yum localinstall -y {{ distro.epel_release }}"

- name: Install rdopkg and rhpkg repos
  sudo: yes
  get_url: url={{ item }}
           dest=/etc/yum.repos.d
           mode=0644
  with_items:
      - "{{ distro.repo.rdopkg }}"
      - "{{ distro.repo.rhpkg }}"

- name: Install packages for patching and building rpms
  yum: name={{ item }} state=latest
  sudo: yes
  with_items:
    - gcc
    - python-crypto
    - rpm-build
    - rdopkg
    - rhpkg
    - python-pbr
    - python2-devel
    - python-d2to1
    - createrepo

- name: Setup git user and mail
  sudo: yes
  shell: >
      git config --system http.sslverify false;
      git config --system user.name {{ ansible_ssh_user }};
      git config --system user.email {{ ansible_ssh_user }}@redhat.com

- name: Clone project
  git: repo="{{ patch.gerrit.url }}"
       version="{{ patch.gerrit.branch }}"
       dest="/home/{{ ansible_ssh_user }}/{{ patch.gerrit.name }}"
       accept_hostkey=true

- name: Fetch patch
  shell: git fetch {{ patch.gerrit.url }} {{ patch.gerrit.refspec }} && git cherry-pick FETCH_HEAD
  args:
      chdir: "/home/{{ ansible_ssh_user }}/{{ patch.gerrit.name }}"

- name: Clone dist-git
  git: repo="{{ patch.dist_git.url }}"
       version="{{ product.name }}-{{ product.full_version }}-rhel-{{ ansible_distribution_version|int }}"
       dest="/home/{{ ansible_ssh_user }}/dist-git/{{ patch.dist_git.name }}"
       accept_hostkey=true

- name: Setup git user and mail
  sudo: yes
  shell: >
      git config --system user.name {{ ansible_ssh_user }};
      git config --system user.email {{ ansible_ssh_user }}@redhat.com

- name: Setup git configurations
  shell: >
      git remote add -f patches /home/{{ ansible_ssh_user }}/{{ patch.gerrit.name }};
      git fetch patches;
      git branch {{ product.name }}-{{ product.full_version }}-patches patches/{{ product.name}}-{{ product.full_version }}-patches
  args:
    chdir: "/home/{{ ansible_ssh_user }}/dist-git/{{ patch.dist_git.name }}"

- name: Create mock group
  sudo: yes
  group: name=mock state=present

- name: Add user to mock group
  sudo: yes
  user: name={{ ansible_ssh_user }} groups=mock
