---
- name: Create the RHOS Release Repository
  template: src=rhos-release.repo.j2 dest=/etc/yum.repos.d/rhos-release.repo
  when: product.repo_type in ['poodle', 'puddle']

- name: install rhos-release
  yum: name=rhos-release state=latest
  when: product.repo_type in ['poodle', 'puddle']

- name: Change server location for repos in  rhos-release
  replace:
    dest=/etc/yum.repos.d/rhos-release-{{ product.version.major }}{{ installer_host_repo | default('')}}-rhel-{{ ansible_distribution_version|string}}.repo
    regexp={{ location.defaultrepo_string }}
    replace={{ location.map[user_location] }}
  when: user_location is defined

- name: Change puddle version for repos in rhos-release
  replace:
    dest=/etc/yum.repos.d/rhos-release-{{ product.version.major }}{{ installer_host_repo | default('')}}-rhel-{{ ansible_distribution_version|string}}.repo
    regexp=/latest/RH{{ ansible_distribution_major_version|string }}
    replace=/{{ product.repo.puddle_pin_version }}/RH{{ ansible_distribution_major_version|string }}
  when: (product.repo.puddle_pin_version is defined and product.repo.puddle_pin_version != 'latest' and product.repo_type == 'puddle')

- name: Create the COPR repos required for component tests
  template: src=component-test-copr-repo.j2 dest=/etc/yum.repos.d/component-test-copr.repo
  when: (test.type.name is defined and (test.type.name == 'unit-test' or test.type.name == 'pep8-test') and ansible_distribution_version|int >= 6)

- name: Change poodle version for repos in rhos-release
  shell: "rhos-release -x; rhos-release  {{ product.version.major }} -d -p {{ product.repo.poodle_pin_version }}"
  when: (product.repo.poodle_pin_version is defined and product.repo.poodle_pin_version != 'latest|GA' and product.repo_type == 'poodle'  and installer_host_repo | default('') == '')

- name: Change poodle version for repos in rhos-release for GA -> Latest Poodle
  shell: "rhos-release -x;  rhos-release  {{ product.version.major }} -p {{ product.repo.poodle_pin_version }}"
  when: (product.repo.poodle_pin_version is defined and product.repo.poodle_pin_version == 'GA' and product.repo_type == 'poodle' and installer_host_repo | default('') == '')

# copr repos
- name: enable tripleo copr repository
  shell: "sudo curl -o /etc/yum.repos.d/slagle-openstack-m.repo {{ product.repo.copr[ ansible_distribution ][distro.full_version] }}"
  when: product.repo.copr is defined
  register: rdo_repo_output

- name: print rdo_repo_output
  debug: var=rdo_repo_output.stdout
  when: product.repo.copr is defined

- name: ensure yum-utils
  yum: name={{ item }} state=present
  with_items:
    - yum-utils

- name: Disable default foreman puddle rhelosp repo when using poodle
  shell: /usr/bin/yum-config-manager --disable 'rhelosp-*-OS-Foreman'
  when: product.repo_type == 'poodle'

# custom repos
- name: enable a custom repository
  yum: name="{{ installer.custom_repo }}"
  when: installer.custom_repo is defined
  register: rdo_repo_output

- name: print rdo_repo_output
  debug: var=rdo_repo_output.stdout
  when: installer.custom_repo is defined

- name: Remove any rhel repo created by rdo-ci #used when both rdo and rhos are in play
  file: path=/etc/yum.repos.d/rhel_ci.repo state=absent
  notify:
    - Yum clean all

- name: List available yum repositories
  command: yum -d 9 repolist
