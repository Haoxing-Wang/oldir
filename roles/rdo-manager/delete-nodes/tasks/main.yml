---
- set_fact: instack_user_home="/home/stack"

- name: set node type to delete
  set_fact: node_type_to_delete={{item}}
  when: nodes.{{item}}.scale_change is defined
  with_items:
    - compute
    - cephstorage
    - blockstorage
    - swiftstorage

- name: setup vars
  template: src=scale-setup-env.j2 dest=~/scale-setup-env mode=0755
  when: node_to_scale is defined

- name: check that overcloud is in complete state
  shell: >
    source {{ instack_user_home }}/stackrc;
    heat stack-list
  register: heat_stack_list_result

- name: fail if stack did not complete
  fail: msg="Stack did not complete"
  when: heat_stack_list_result.stdout.find("COMPLETE") == -1

- name: get nodes from nova list
  shell: >
    source {{ instack_user_home }}/stackrc;
    source {{ instack_user_home }}/scale-setup-env;
    nova list | grep $NODE_TO_SCALE_TYPE | cut -f2- -d':' | wc -l
  register: nova_list_count_before
  when: node_type_to_delete is defined

- name: get id of node to be deleted
  shell: >
    source {{ instack_user_home }}/stackrc;
    source {{ instack_user_home }}/scale-setup-env;
    nova list | grep -m 1 $NODE_TO_SCALE_TYPE | sed -e 's/|//g' | awk '{print $1}'
  register: node_id_to_delete
  when: node_type_to_delete is defined

- name: delete the node by id
  shell: >
    source {{ instack_user_home }}/stackrc;
    source {{ instack_user_home }}/scale-setup-env;
    openstack overcloud node delete {{ node_id_to_delete.stdout }} --plan overcloud --stack overcloud
  when: node_type_to_delete is defined

- name: poll for heat stack-list to go to COMPLETE
  shell: >
    source {{ instack_user_home }}/stackrc;
    heat stack-list
  register: heat_stack_list_result
  until: heat_stack_list_result.stdout.find("COMPLETE") != -1
  retries: 10
  delay: 180
  when: node_type_to_delete is defined

- name: get the number of nodes
  shell: >
    source {{ instack_user_home }}/stackrc;
    source {{ instack_user_home }}/scale-setup-env;
    nova list | grep $NODE_TO_SCALE_TYPE | cut -f2- -d':' | wc -l
  register: nova_list_count_after
  when: node_type_to_delete is defined

- name: get nova list
  shell: >
    source {{ instack_user_home }}/stackrc;
    nova list
  register: nova_list_after

- name: check the deleted node is not in nova list
  fail: msg="Deleted node is still in nova list output."
  when: (node_type_to_delete is defined) and nova_list_after.stdout.find(node_id_to_delete.stdout) != -1

- name: get nova service-list for compute nodes
  shell: >
    source {{ instack_user_home }}/overcloudrc;
    source {{ instack_user_home }}/scale-setup-env;
    nova service-list | grep nova-compute
  register: nova_service_compute
  when: node_type_to_delete is defined and node_type_to_delete == 'compute'

- name: check the service list shows a compute node down
  fail: msg="Overcloud nova list does not show expected number of compute services up/down"
  when: (node_type_to_delete is defined) and node_type_to_delete == 'compute' and nova_service_compute.stdout.find("down") == -1

- name: get ceph status for ceph nodes
  shell: >
    source {{ instack_user_home }}/overcloudrc;
    ceph -s
  register: ceph_s
  when: node_type_to_delete is defined and node_type_to_delete == 'cephstorage'
