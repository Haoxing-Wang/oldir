---

- name: add export of LIVBIRT_DEFAULT_URI to bashrc file
  shell: "echo 'export LIBVIRT_DEFAULT_URI=\"qemu:///system\"' >> ~/.bashrc"
  sudo_user: "{{ instack.user.stack.name }}"
  sudo: yes

- name: run script to install required dependencies
  shell: >
    chdir={{ instack_user_home.stdout }}
    export LIBVIRT_DEFAULT_URI=\"qemu:///system\" ;
    source /usr/libexec/openstack-tripleo/devtest_variables.sh;
    tripleo install-dependencies;
    tripleo set-usergroup-membership
  ignore_errors: yes
  sudo_user: "{{ instack.user.stack.name }}"
  sudo: yes

- name: run script to setup virtual environment
  register: instack_virt_result
  shell: >
    chdir={{ instack_user_home.stdout }}
    export LIBVIRT_DEFAULT_URI="qemu:///system";
    export UNDERCLOUD_ROOT_PASSWORD={{ instack.environ.vm_pw }};
    instack-virt-setup
  when: distro.name == 'fedora'
  sudo_user: "{{ instack.user.stack.name }}"
  sudo: yes

- name: run script to setup virtual environment
  register: instack_virt_result
  shell: >
    chdir={{ instack_user_home.stdout }}
    export RHOS=1;
    export NODE_DIST="rhel7";
    export DIB_YUM_REPO_CONF="/etc/yum.repos.d/rhos-release-6-rhel-7.0.repo";
    export DIB_CLOUD_IMAGES="{{ product.rhel7.remote_file_server }}";
    export BASE_IMAGE_FILE="{{ product.rhel7.guest_image_name }}";
    export REG_HALT_UNREGISTER=1
    export REG_METHOD=disable;
    export LIBVIRT_DEFAULT_URI="qemu:///system";
    export UNDERCLOUD_ROOT_PASSWORD={{ instack.environ.vm_pw }};
    instack-virt-setup
  when: distro.name == 'rhel'
  sudo_user: "{{ instack.user.stack.name }}"
  sudo: yes

- name: list vms
  shell: "export LIBVIRT_DEFAULT_URI=\"qemu:///system\" ; sleep 5; virsh list --all"
  sudo_user: "{{ instack.user.stack.name }}"
  sudo: yes

- name: get instack vm ip address
  shell: >
     chdir={{ instack_user_home.stdout }}
     sleep 30;
     cat /var/lib/libvirt/dnsmasq/default.leases | grep $(tripleo get-vm-mac instack) | awk '{print $3;}'
  sudo_user: "{{ instack.user.stack.name }}"
  sudo: yes
  register: instack_vm_ip_result

- name: print instack_vm_ip_result
  debug: var=instack_vm_ip_result.stdout

- name: copy keys from root user
  shell: "cat /root/.ssh/authorized_keys >> {{ instack_user_home.stdout }}/.ssh/authorized_keys"

- name: enable EPEL repo for sshpass
  template: src=epel.repo.j2 dest=/etc/yum.repos.d/epel.repo
  when: ansible_distribution == 'RedHat'

- name: install sshpass for tunnel
  yum: name=sshpass state=present

- name: Remove the EPEL Repository
  yum: name=epel-release state=removed
  when: ansible_distribution == "RedHat"
  notify:
    - Yum clean all

- name: Ensure the EPEL Repository files are removed
  file: path=/etc/yum.repos.d/epel.repo state=absent
  notify:
    - Yum clean all
  when: ansible_distribution == "RedHat"

- name: kill any previously created ssh tunnels
  command: killall -9 sshpass
  ignore_errors: yes

- name: command used to create ssh tunnel
  debug: msg="sudo iptables -I INPUT -p tcp --dport {{ instack.environ.vm_ssh_port }} -j ACCEPT; sshpass -p {{ instack.user.stack.password_text }} ssh -o \"StrictHostKeyChecking no\" -g -N -L {{ instack.environ.vm_ssh_port }}:{{ instack_vm_ip_result.stdout }}:22 `hostname` &"

- name: open ssh tunnel to instack vm on port {{ instack.environ.vm_ssh_port }}
  shell: "sudo iptables -I INPUT -p tcp --dport {{ instack.environ.vm_ssh_port }} -j ACCEPT; sshpass -p {{ instack.user.stack.password_text }} ssh -o \"StrictHostKeyChecking no\" -g -N -L {{ instack.environ.vm_ssh_port }}:{{ instack_vm_ip_result.stdout }}:22 `hostname` &"
  register: tunnel_port_output
  sudo_user: "{{ instack.user.stack.name}}"
  sudo: yes
  async: 36000
  poll: "{{ 0 }}"

- name: check if stack user with known password exists
  shell: >
    sshpass -p {{ instack.user.stack.password_text }} ssh -x -t -t -o 'StrictHostKeyChecking=no' stack@{{ instack_vm_ip_result.stdout }} 'exit' || echo "SSH login failed."
  register: stack_login_output

- name: add stack user
  shell: >
    ssh -x -t -t -o 'StrictHostKeyChecking=no' -i /home/stack/.ssh/id_rsa_virt_power root@{{ instack_vm_ip_result.stdout }} 'useradd stack; export UNDERCLOUD_STACK_PASSWORD=stack; echo $UNDERCLOUD_STACK_PASSWORD | sudo passwd stack --stdin'
  when: stack_login_output.stdout.find("failed") != -1
