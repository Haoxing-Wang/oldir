---
- name: scale overcloud nodes
  hosts: undercloud
  tasks:
    - name: set fact stack user home
      set_fact: instack_user_home=/home/{{ provisioner.remote_user }}

    - name: set node type to scale
      set_fact: node_to_scale={{item}}
      when: installer.nodes.{{item}}.scale_change is defined
      with_items:
        - compute
        - cephstorage
        - blockstorage
        - swiftstorage

    - name: setup vars
      template: src=templates/scale-setup-env.j2 dest=~/scale-setup-env mode=0755
      when: node_to_scale is defined

    - name: Contents of scale-setup-env
      shell: >
        cat {{ instack_user_home }}/scale-setup-env
      when: node_to_scale is defined

    - name: get plan list
      register: overcloud_uuid
      shell: >
        source {{ instack_user_home }}/stackrc;
        openstack management plan list | grep overcloud | cut -d " " -f2
      when: node_to_scale is defined

    - name: echo scale overcloud nodes
      shell: >
        source {{ instack_user_home }}/stackrc;
        source {{ instack_user_home }}/scale-setup-env;
        echo "openstack management plan set {{ overcloud_uuid.stdout }} -S $NODE_TO_SCALE_PLAN_TYPE=$NODE_SCALE_CHANGE"
      register: overcloud_plan_set
      when: node_to_scale is defined

    - name: run command
      shell: echo {{ overcloud_plan_set.stdout }}
      when: node_to_scale is defined

    - name: scale overcloud nodes
      shell: >
        source {{ instack_user_home }}/stackrc;
        source {{ instack_user_home }}/scale-setup-env;
        {{ overcloud_plan_set.stdout }};
        openstack overcloud deploy --debug --log-file overcloud_deployment_scale.log --plan-uuid {{ overcloud_uuid.stdout }} &> overcloud_deployment_scale_console.log
      when: node_to_scale is defined

    - name: poll for heat stack-list to go to COMPLETE
      shell: >
        source {{ instack_user_home }}/stackrc;
        heat stack-list
      register: heat_stack_list_result
      until: heat_stack_list_result.stdout.find("COMPLETE") != -1
      retries: 10
      delay: 180
      when: node_to_scale is defined

    - name: get the number of nodes
      shell: >
        source {{ instack_user_home }}/stackrc;
        source {{ instack_user_home }}/scale-setup-env;
        nova list | grep $NODE_TO_SCALE_TYPE | cut -f2- -d':' | wc -l
      register: nova_list_output
      when: node_to_scale is defined

    - name: get value for scale_change
      shell: >
        source {{ instack_user_home }}/stackrc;
        source {{ instack_user_home }}/scale-setup-env;
        echo $NODE_SCALE_CHANGE
      register: scale_change_value
      when: node_to_scale is defined

    - name: check the number of nodes match the scaled values
      fail: msg="Overcloud nodes were not scaled correctly."
      when: (node_to_scale is defined) and (scale_change_value.stdout != nova_list_output.stdout)

    - name: print nova service-list
      shell: >
        source {{ instack_user_home }}/overcloudrc;
        nova service-list
      when: node_to_scale is defined

    - name: get nova service-list for compute nodes
      shell: >
        source {{ instack_user_home }}/overcloudrc;
        source {{ instack_user_home }}/scale-setup-env;
        nova service-list | grep nova-compute | cut -f2- -d':' | wc -l
      register: nova_service_compute
      when: node_to_scale is defined and node_to_scale == 'compute'

    - name: check the service list matches the number of compute nodes
      fail: msg="Overcloud nova list does not show expected number of compute services"
      when: (node_to_scale is defined) and node_to_scale == 'compute' and nova_service_compute.stdout != scale_change_value.stdout
