---
- name: test host connection
  hosts: all:!localhost
  tasks:
    - name: test ssh
      command: hostname

    - name: check distro
      command: cat /etc/redhat-release

    - name: set fact stack user home
      set_fact: instack_user_home=/home/{{ provisioner.remote_user }}

- name: build or import images
  hosts: undercloud
  tasks:
    - name: setup environment vars
      template: src=templates/build-img-env.j2 dest=~/build-img-env mode=0755

    - name: ensure /tmp/svc-map-services is absent
      file: path=/tmp/svc-map-services state=absent
      sudo: yes
      when: installer.overcloud_images | default('build') == "build"

    - name: Contents of build-img-env
      shell: >
          cat {{ instack_user_home }}/build-img-env

    - name: build all the images
      shell: >
          source {{ instack_user_home }}/build-img-env;
          instack-build-images > {{ instack_user_home }}/instack-build-images.log
      when: installer.overcloud_images | default('build') == "build"

    - name: download the pre-built rdo-manager images
      get_url: url="{{ installer.images[product.name][product.version][distro.name][distro.version]}}{{ item }}.tar"
                    dest={{ instack_user_home }}
                    force=no
      with_items:
        - deploy-ramdisk-ironic
        - discovery-ramdisk
        - overcloud-full
      when: installer.overcloud_images is defined and installer.overcloud_images == "import"

    - name: untar the overcloud images
      shell: tar -xvf "{{ instack_user_home }}/{{ item }}.tar"
      with_items:
        - deploy-ramdisk-ironic
        - discovery-ramdisk
        - overcloud-full
      when: installer.overcloud_images is defined and installer.overcloud_images == "import"

    - name: prepare for overcloud by loading the images into glance
      command: instack-prepare-for-overcloud

- name: register and discover nodes
  hosts: undercloud
  tasks:
    - name: register bm nodes with openstack cli
      register: result
      retries: 10
      delay: 10
      until: result.rc == 0
      shell: >
          source {{ instack_user_home }}/stackrc;
          openstack baremetal import --json instackenv.json;


    - name: register bm nodes with ironic
      register: result
      retries: 10
      delay: 10
      until: result.rc == 0
      shell: >
          source {{ instack_user_home }}/stackrc;
          openstack baremetal configure boot

    - name: assign kernel and ramdisk to nodes
      shell: >
          source {{ instack_user_home }}/stackrc;
          openstack baremetal configure boot;

    - name: introspect nodes
      shell: >
          source {{ instack_user_home }}/stackrc;
          openstack baremetal introspection bulk start;

    - name: check instrospections status
      register: result
      retries: 45
      delay: 20
      until: result.rc == 0
      shell: >
          source {{ instack_user_home }}/stackrc;
          OUTPUT=$(openstack baremetal introspection bulk status)
          TOTAL_NODES=$(echo "$OUTPUT" | grep -E '\w{8}-\w{4}' | wc -l)
          INTROSPECTED_NODES=$(echo "$OUTPUT" | grep -E ' True *\| *None ' | wc -l)
          [ "$TOTAL_NODES" == "$INTROSPECTED_NODES" ]

    - name: show profile
      shell: >
          source {{ instack_user_home }}/stackrc;
          instack-ironic-deployment  --show-profile;

    - name: setup flavors
      shell: >
          source {{ instack_user_home }}/stackrc;
          openstack flavor create --id auto --ram 4096 --disk 40 --vcpus 1 baremetal;
          openstack flavor set --property "cpu_arch"="x86_64" --property "capabilities:boot_option"="local" baremetal;

- name: deploy the overcloud
  hosts: undercloud
  tasks:
    - name: get plan list
      register: overcloud_uuid
      shell: >
          source {{ instack_user_home }}/stackrc;
          if [ -f "{{ instack_user_home }}/deploy-overcloudrc" ]; then
              source {{ instack_user_home }}/deploy-overcloudrc;
          fi;
          openstack management plan list | grep overcloud | cut -d " " -f2

    - name: echo deploy command
      register: overcloud_deploy_command
      shell: >
          source {{ instack_user_home }}/stackrc;
          if [ -f "{{ instack_user_home }}/deploy-overcloudrc" ]; then
            source {{ instack_user_home }}/deploy-overcloudrc;
          fi;
          echo "openstack overcloud deploy --plan-uuid {{ overcloud_uuid.stdout }} --control-scale $CONTROLSCALE --compute-scale $COMPUTESCALE --ceph-storage-scale $CEPHSTORAGESCALE"

    - name: run command
      shell: echo {{ overcloud_deploy_command.stdout }}

    - name: deploy-overcloud
      register: result
      ignore_errors: yes
      shell: >
          source {{ instack_user_home }}/stackrc;
          if [ -f "{{ instack_user_home }}/deploy-overcloudrc" ]; then
              source {{ instack_user_home }}/deploy-overcloudrc;
          fi;
          {{ overcloud_deploy_command.stdout }}

    - name: does overcloud need post config
      ignore_errors: yes
      shell: >
        source {{ instack_user_home }}/stackrc;
        openstack --help | grep "overcloud postconfig";
      register: needs_postconfig


    - name: set overcloud controller ip
      when: needs_postconfig.rc == 0
      shell: >
        source {{ instack_user_home }}/stackrc;
        heat output-show overcloud KeystoneURL | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}";
      register: overcloud_controller_ip

    - name: openstack post config
      when: result.rc == 0 and needs_postconfig.rc == 0
      shell: >
          source {{ instack_user_home }}/overcloudrc;
          openstack overcloud postconfig {{ overcloud_controller_ip.stdout }}

    - name: print result of deploy-overcloud install
      debug: var=result.stdout_lines
      when: result.rc == 0

    - name: See the overcloud deployment
      shell: >
          source {{ instack_user_home }}/stackrc;
          heat stack-list;
          nova list;
          openstack baremetal list;
          openstack server list;

    - name: debug deploy-overcloud failure
      when: result.rc != 0
      shell: >
          source {{ instack_user_home }}/stackrc;
          heat resource-list overcloud;
          heat event-list overcloud;

    - name: debug deploy-overcloud failure
      when: result.rc != 0
      ignore_errors: yes
      shell: >
          source {{ instack_user_home }}/stackrc;
          heat resource-show overcloud ControllerNodesPostDeployment;

    - name: debug all deployment failures
      when: result.rc != 0
      ignore_errors: yes
      shell: >
          source {{ instack_user_home }}/stackrc;
          for failed_deployment in $(heat resource-list --nested-depth 5 overcloud | grep FAILED | grep 'StructuredDeployment ' | cut -d '|' -f3); do heat deployment-show $failed_deployment; done;

    - name: grep for errors in heat-engine.log
      when: result.rc != 0
      sudo: yes
      command: "grep ERROR /var/log/heat/heat-engine.log"

    - name: show ironic nodes create template
      when: result.rc != 0
      template: src=templates/show_nodes.sh dest={{ instack_user_home }}/show_nodes.sh mode=0755

    - name: show ironic nodes
      when: result.rc != 0
      shell: "{{ instack_user_home }}/show_nodes.sh"

    - name: cat "/etc/edeploy"
      when: result.rc != 0
      sudo: yes
      shell: "for i in `ls /etc/edeploy/`;do echo $i; cat /etc/edeploy/$i;done"

    - name: copy the undercloud id_rsa key back to the slave
      fetch: src=~/.ssh/id_rsa dest=../../../id_rsa_undercloud flat=yes

    - name: copy get-overcloud-nodes.py to undercloud
      template: src=templates/get-overcloud-nodes.py.j2 dest={{ instack_user_home }}/get-overcloud-nodes.py mode=0755

    - name: fetch overcloud node names and IPs
      register: overcloud_nodes
      ignore_errors: yes
      shell: >
          source {{ instack_user_home }}/stackrc;
          python {{ instack_user_home }}/get-overcloud-nodes.py

    - name: add each overcloud node to ansible
      with_dict: overcloud_nodes.stdout
      ignore_errors: yes
      add_host:
        name={{ item.key }}
        groups=overcloud
        ansible_ssh_host={{ item.value }}
        ansible_fqdn={{ item.value }}
        ansible_ssh_user="heat-admin"
        ansible_ssh_private_key_file="{{ lookup('env', 'PWD') }}/id_rsa_undercloud"

- name: regenerate the inventory file after adding hosts
  hosts: localhost
  tasks:
    - name: create inventory from template
      template:
        dest: "{{ lookup('env', 'PWD') }}/{{ tmp.node_prefix }}hosts"
        src: ../../provisioner/templates/inventory.j2

    - name: symlink inventory to a static name
      file:
        dest: "{{ lookup('env', 'PWD') }}/hosts"
        state: link
        src: "{{ lookup('env', 'PWD') }}/{{ tmp.node_prefix }}hosts"

    - name: regenerate ssh config
      template: src=templates/ssh_config.j2 dest=../../../ssh.config.ansible mode=0755

- name: fail playbook when instack-deploy-overcloud fails
  hosts: undercloud
  tasks:
    - command: echo "instack-deploy-overcloud failed, see the above debug information"
      failed_when: result.rc != 0
