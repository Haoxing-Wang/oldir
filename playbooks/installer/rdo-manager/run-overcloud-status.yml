---
- name: test host connection
  hosts: all:!localhost
  tasks:
    - name: set fact stack user home
      set_fact: instack_user_home=/home/{{ provisioner.remote_user }}

- name: Post deploy
  hosts: undercloud
  tasks:
    - name: echo deploy-overcloud return code in status playbook
      debug: var=overcloud_deployment_result

    - name: print result of deploy-overcloud install
      debug: var=overcloud_deployment_result.stdout_lines
      when: overcloud_deployment_result == "0"

    - name: See the overcloud deployment
      shell: >
          source {{ instack_user_home }}/stackrc;
          heat stack-list;
          nova list;
          openstack baremetal list;
          openstack server list;

    - name: heat debug deploy-overcloud failure
      when: overcloud_deployment_result != "0"
      ignore_errors: yes
      shell: >
          source {{ instack_user_home }}/stackrc;
          heat resource-list overcloud;
          heat event-list overcloud;

    - name: debug deploy-overcloud failure
      when: overcloud_deployment_result != "0"
      ignore_errors: yes
      shell: >
          source {{ instack_user_home }}/stackrc;
          heat resource-show overcloud ControllerNodesPostDeployment;

    - name: debug all deployment failures
      when: overcloud_deployment_result != "0"
      ignore_errors: yes
      shell: >
          source {{ instack_user_home }}/stackrc;
          for failed_deployment in $(heat resource-list --nested-depth 5 overcloud | grep FAILED | grep 'StructuredDeployment ' | cut -d '|' -f3); do heat deployment-show $failed_deployment; done;

    - name: grep for errors in heat-engine.log
      when: overcloud_deployment_result != "0"
      sudo: yes
      command: "grep ERROR /var/log/heat/heat-engine.log"

    - name: show ironic nodes create template
      when: overcloud_deployment_result != "0"
      template: src=templates/show_nodes.sh dest={{ instack_user_home }}/show_nodes.sh mode=0755

    - name: show ironic nodes
      when: overcloud_deployment_result != "0"
      shell: "{{ instack_user_home }}/show_nodes.sh"

    - name: copy the undercloud id_rsa key back to the slave
      fetch: src=~/.ssh/id_rsa dest=../../../id_rsa_undercloud flat=yes

    - name: copy get-overcloud-nodes.py to undercloud
      template: src=templates/get-overcloud-nodes.py.j2 dest={{ instack_user_home }}/get-overcloud-nodes.py mode=0755

    - name: fetch overcloud node names and IPs
      register: overcloud_nodes
      ignore_errors: yes
      shell: >
          source {{ instack_user_home }}/stackrc;
          python {{ instack_user_home }}/get-overcloud-nodes.py

    - name: add each overcloud node to ansible
      with_dict: overcloud_nodes.stdout
      ignore_errors: yes
      add_host:
        name={{ item.key }}
        groups=overcloud
        ansible_ssh_host={{ item.value }}
        ansible_fqdn={{ item.value }}
        ansible_ssh_user="heat-admin"
        ansible_ssh_private_key_file="{{ lookup('env', 'PWD') }}/id_rsa_undercloud"

- name: regenerate the inventory file after adding hosts
  hosts: localhost
  tasks:
    - name: create inventory from template
      template:
        dest: "{{ lookup('env', 'PWD') }}/{{ tmp.node_prefix }}hosts"
        src: ../../provisioner/templates/inventory.j2

    - name: symlink inventory to a static name
      file:
        dest: "{{ lookup('env', 'PWD') }}/hosts"
        state: link
        src: "{{ lookup('env', 'PWD') }}/{{ tmp.node_prefix }}hosts"

    - name: regenerate ssh config
      template: src=templates/ssh_config.j2 dest=../../../ssh.config.ansible mode=0755

- name: debug output from the overcloud controller
  hosts: overcloud-controller-0
  tasks:
    - name: ceph status
      sudo: yes
      command: ceph status
      ignore_errors: yes

- name: fail playbook when instack-deploy-overcloud fails
  hosts: undercloud
  tasks:
    - fail: msg="instack-deploy-overcloud failed, see the above debug information"
      when: overcloud_deployment_result != "0"

#Execute Tempest
- name: Run tempest tasks
  hosts: undercloud
  tasks:
    - name: get nova uuid
      register: public_network_uuid_result
      shell: >
            source {{ instack_user_home }}/overcloudrc;
            openstack network list | grep nova | cut -d " " -f2
      when: installer.network.type == "neutron"

    - name: set fact for public network uuid
      set_fact:
        public_network_uuid: "{{ public_network_uuid_result.stdout }}"
      when: installer.network.type == "neutron"

    - name: add keystone role heat_stack_owner
      ignore_errors: yes
      shell: >
            source {{ instack_user_home }}/overcloudrc;
            keystone role-create --name heat_stack_owner;

    - name: add public_network_id into overcloud_validate.py BZ 1243828
      sudo: yes
      shell: sed -i "s/tempest.conf.*/tempest.conf --network-id {{ public_network_uuid }} '/" \
            /usr/lib/python2.7/site-packages/rdomanager_oscplugin/v1/overcloud_validate.py
      tags: workaround
      when: workarounds.enabled is defined and
            workarounds.enabled|bool and
            product.name != "rdo"

    - name: update SwiftOperator with the correct name BZ 1243825
      sudo: yes
      shell: sed -i "s/SwiftOperator/swiftoperator/" \
            /usr/lib/python2.7/site-packages/rdomanager_oscplugin/v1/overcloud_validate.py
      tags: workaround
      when: workarounds.enabled is defined and workarounds.enabled|bool

    - name: change cirros user to fedora
      sudo: yes
      shell: sed -i "s/cirros/fedora/" \
            /usr/lib/python2.7/site-packages/rdomanager_oscplugin/v1/overcloud_validate.py
      tags: workaround
      when: overcloud_deployment_result == "0" and
            installer.tempest.enabled is defined and
            not installer.tempest.enabled|bool and
            product.name == "rhos"

    - name: add config into overcloud_validate.py for Fedora image
      sudo: yes
      lineinfile: dest=/usr/lib/python2.7/site-packages/rdomanager_oscplugin/v1/overcloud_validate.py
                  regexp="--create \'"
                  insertafter="--create \'"
                  line="                        \'--debug --create --image /home/stack/fedora-user.qcow2 compute.flavor_ref 2 compute.flavor_ref_alt 2 \'"
                  backup=yes
                  backrefs=yes
                  state=present
      when: overcloud_deployment_result == "0" and
            installer.tempest.enabled is defined and
            not installer.tempest.enabled|bool and
            product.name == "rhos"

    - name: copy skipfile into stack home
      copy: src=files/skipfile dest={{ instack_user_home }}/skipfile owner=stack group=stack
      when: overcloud_deployment_result == "0" and
            installer.tempest.enabled is defined and
            installer.tempest.enabled|bool

    - name: run simple tempest based overcloud tests for gating
      register: test_basic_output
      when: overcloud_deployment_result == "0" and
            installer.tempest.enabled is defined and
            not installer.tempest.enabled|bool and
            product.name == "rhos"
      shell: >
          source {{ instack_user_home }}/overcloudrc;
          openstack overcloud validate --overcloud-auth-url $OS_AUTH_URL \
          --overcloud-admin-password "$OS_PASSWORD" \
          --tempest-args tempest.scenario.test_minimum_basic &> {{ instack_user_home }}/tempest_console.log

    - name: check test_minimum_basic output
      ignore_errors: yes
      shell: "[ `grep \"Passed\" tempest_console.log | cut -d \":\" -f2` -eq 1 ]"
      register: tempest_console_log_passed_grep
      when: overcloud_deployment_result == "0" and
            installer.tempest.enabled is defined and
            not installer.tempest.enabled|bool and
            product.name == "rhos"

    - name: fail when tempest comsole log does not show 1 passed test returned
      fail: msg="tempest.scenario.test_minimum_basic did not return 1 passsed test."
      when: tempest_console_log_passed_grep is defined and
            tempest_console_log_passed_grep.rc != 0

    - name: run extensive tempest based overcloud tests
      ignore_errors: yes
      when: overcloud_deployment_result == "0" and
            installer.tempest.enabled is defined and
            installer.tempest.enabled|bool
      shell: >
          source {{ instack_user_home }}/overcloudrc;
          openstack overcloud validate --overcloud-auth-url $OS_AUTH_URL \
          --overcloud-admin-password "$OS_PASSWORD" \
          --tempest-args {{ installer.tempest.test_regex }} \
          --skipfile {{ instack_user_home }}/skipfile &> {{ instack_user_home }}/tempest_console.log

    - name: run overcloud tests on rdo
      ignore_errors: yes
      when: overcloud_deployment_result == "0" and
            installer.tempest.enabled is defined and
            installer.tempest.enabled|bool and
            product.name == "rdo"
      shell: >
          source {{ instack_user_home }}/overcloudrc;
          openstack overcloud validate --overcloud-auth-url $OS_AUTH_URL \
          --overcloud-admin-password "$OS_PASSWORD" \
          --tempest-args {{ installer.tempest.test_regex }} \
          --network-id {{ public_network_uuid }} \
          --skipfile {{ instack_user_home }}/skipfile &> {{ instack_user_home }}/tempest_console.log

    - name: fetch tempest result
      fetch: src={{ installer.tempest.dir }}/tempest.xml dest={{ lookup('env', 'PWD') }}/nosetests.xml flat=yes
      when: overcloud_deployment_result == "0" and
            installer.tempest.enabled is defined and
            product.name != "rdo" or installer.tempest.enabled|bool
