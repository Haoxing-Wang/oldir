---
- include: ../../group_by.yml ansible_ssh_user=root

- name: Setup openstack repos
  hosts: "{{ repo_host }}:&RedHat"
  vars:
    - ansible_ssh_user: root
    - product_override_version: 7
  gather_facts: yes
  tasks:
      - name: clean release rpms
        yum: name={{ item }} state=absent
        with_items:
          - rhos-release

      - name: remove any yum repos not owned by rpm
        file: path=/etc/yum.repos.d/{{ item }} state=absent
        with_items:
          - beaker-*

      - name: Install release tool on machine
        command: "yum localinstall -y {{ product.rpmrepo[ansible_distribution] }}/{{ product.name }}-release-latest.noarch.rpm"

      - name: Execute rhos-release for pinned osp-director puddle (osp)
        command: "rhos-release -p {{ product.repo.puddle_director_pin_version }} {{ product.full_version }}"
        register: pinned_puddle
        when: product.repo_type in ['puddle'] and product.repo.puddle_director_pin_version is defined

      - name: Execute rhos-release for core rhos puddle (osp)
        command: "rhos-release -p {{ product.repo.puddle_pin_version }} {{ product.repo.core_product_version }}"
        register: pinned_puddle
        when: product.repo_type in ['puddle'] and product.repo.puddle_pin_version is defined

      - name: Execute rhos-release for pinned osp-director poodle (osp)
        command: "rhos-release  -d -p {{ product.repo.poodle_pin_version }} {{ product.full_version }}"
        register: pinnged_poodle
        when: product.repo_type in ['poodle'] and product.repo.poodle_pin_version is defined

      - name: Execute rhos-release for osp-director puddle (osp)
        command: "rhos-release {{ product.full_version }}"
        when: product.repo_type in ['puddle'] and product.repo.puddle_pin_version is not defined

      - name: Execute rhos-release for osp-director poodle (osp)
        command: "rhos-release  -d {{ product.full_version }}"
        when: product.repo_type in ['poodle'] and product.repo.poodle_pin_version is not defined

      - name: yum clean all
        command: yum clean all

- name: Get build details
  hosts: "{{ repo_host }}:&RedHat"
  vars:
    - ansible_ssh_user: root
  roles:
    - build_mark/build

- name: Linux common prep (Collect performance data, etc.)
  hosts: "{{ repo_host }}"
  vars:
    - ansible_ssh_user: root
  roles:
    - { role: linux-common }

- name: Update packages on the host
  hosts: "{{ repo_host }}"
  vars:
    - ansible_ssh_user: root
  tasks:
    - name: repolist
      command: yum -d 7 repolist

    - name: update all packages
      yum: name=* state=latest
      when: yum_update | bool

    - name: Find if a new kernel was installed
      shell: find /boot/ -anewer /proc/1/stat -name 'initramfs*' | egrep ".*"
      register: new_kernel
      ignore_errors: True
      when: "'{{ repo_host }}' == 'virthost'"

    - name: reboot host
      sudo: no
      local_action:
        wait_for_ssh
          reboot_first=true
          host="{{ ansible_ssh_host }}"
          user="root"
          key="{{ ansible_ssh_private_key_file }}"
          timeout=900
          sudo=false
      when: "'{{ repo_host }}' == 'virthost' and new_kernel.rc == 0"
