---
- name: Create keystonerc
  hosts: tester
  sudo: yes
  tasks:
      - name: Create keystonerc_admin
        template: "src=../templates/rally_env_file.j2 dest={{ tester.rally.dir }}/rally_env_file.yml"

- name: Copy to Task Files Rally
  hosts: tester
  sudo: yes
  tasks:
  - name: Copy Task file from Khaleesi Settings
    copy: dest="{{ tester.rally.dir }}/{{ tester.rally.taskfile }}" content="{{ tester.rally.task }}" force=yes

- name: Setup Rally
  hosts: tester
  tasks:
#  Need to somehow skip this if deployment exists
  - name: Create Rally deployment
    shell: "{{ tester.rally.path }}/rally deployment create --name {{ tester.rally.deployment }} --filename {{ tester.rally.dir }}/rally_env_file.yml | awk '/{{ tester.rally.deployment }}/ {print $2}'"
    register: rally_deployment_uuid
    ignore_errors: True

  - debug: var=rally_deployment_uuid

  - name: Use Rally deployment
    shell: "{{ tester.rally.path }}/rally use deployment {{ tester.rally.deployment }} | awk '/Using deployment/ {print $3}'"
    register: rally_deployment_uuid
    when: "'Deployment' in rally_deployment_uuid.stdout"

  - debug: var=rally_deployment_uuid

- name: Run Rally Task
  hosts: tester
  tasks:
  - name: Check Rally deployment
    command: "{{ tester.rally.path }}/rally deployment check"
  - name: Start Rally task
    command: "{{ tester.rally.path }}/rally -v task start --task {{ tester.rally.dir }}/{{ tester.rally.taskfile }}"
    args:
      chdir: "{{ tester.rally.dir }}"



# TODO(yfried): Add this to enable Tempset Via Rally
#- name: Setup Tempest
#  hosts: tester
#  tasks:
#  - name: Install Tempest with Rally
#    command: "{{ tester.rally.path }}/rally-manage -v tempest install --deployment {{ tester.rally.deployment }} --source {{ tester.rally.tempest.git.repo }}"
#
#  - name: Set Tempest Branch to Juno to get tempest config
#    command: "git checkout {{ tester.rally.tempest.git.revision }}"
#    args:
#      chdir: "{{ tester.rally.tempest.base }}/for-deployment-{{ tester.rally_deployment_uuid.stdout }}"
#      creates: "{{ tester.rally.tempest.base }}/for-deployment-{{ tester.rally_deployment_uuid.stdout }}/tools/config_tempest.py"
#
#  - name: Create tempest config file
#    shell: "{{ tester.rally.path }}/python {{ item }}/tools/config_tempest.py --out {{ tester.rally.tempest.conf }} --debug  --create identity.uri http://{{ hostvars[nodes.controller.name].ansible_default_ipv4.address }}:5000/v2.0/ compute.allow_tenant_isolation true object-storage.operator_role SwiftOperator identity.admin_password {{ hostvars[nodes.controller.name].admin_password|default('redhat') }} identity.password {{ hostvars[nodes.controller.name].demo_password|default('secrete') }} network.public_network_id {{ hostvars[nodes.controller.name].network.id }}"
#    args:
#      chdir: "{{ item }}"
#      creates: "{{ tester.rally.tempest.conf }}"
#    with_items:
#      - "{{ tester.rally.tempest.base }}/for-deployment-{{ tester.rally_deployment_uuid.stdout }}"
#
#  - name: Start Tempest Via Rally
#    command: "{{ tester.rally.path }}/rally -v verify start --deployment {{ tester.rally.deployment }} --regex {{ tester.rally.tempest.regex }} --tempest-config {{ tester.rally.tempest.conf }}"
