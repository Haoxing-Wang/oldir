---
- name: Gather Logs
  hosts: all:!localhost
  gather_facts: no
  sudo: yes
  tasks:
    - name: Ensure required rpms for logging are installed
      yum: name={{ item }} state=present
      with_items:
        - gzip
        - tar

    - name: collect list of installed rpms
      shell: rpm -qa > /var/log/rpm.list

    - name: collect list of running kernel modules
      shell: lsmod > /var/log/module_list
      ignore_errors: true

    - name: prepare directory with extra logs
      file: dest=/var/log/extra state=directory
      ignore_errors: true

    - name: collect logs from all failed systemd services
      shell: |
        systemctl -t service --failed --no-legend | awk '{print $1}' \
            | xargs -r -n1 journalctl -u > /var/log/extra/services 2>&1
      ignore_errors: true

    - name: collect network status info 
      shell: |
        (ip a; ip r; iptables-save;iptables -nL) &> /var/log/extra/network;
        (for NS in $(ip netns list); do
          echo "==== $NS ====";
          ip netns exec $NS ip a;
          ip netns exec $NS ip r;
          ip netns exec $NS ip iptables-save;
          PIDS="$(ip netns pids $NS)";
          [[ ! -z "$PIDS" ]] && ps --no-headers -f --pids "$PIDS";
          echo "";
          done) &> /var/log/extra/network-netns
        (for NB in $(ovs-vsctl show | grep Bridge |awk '{print $2}'); do
          echo "==== Bridge name - $NB ====";
          ovs-ofctl show $NB
          ovs-ofctl dump-flows $NB
          echo "";
          done;ovsdb-client dump) &> /var/log/extra/network-bridges
      ignore_errors: true

    - shell: "lsof -P &> /var/log/extra/lsof"
      ignore_errors: true

    - shell: "pstree -p &> /var/log/extra/pstree"
      ignore_errors: true

    - shell: "sysctl -a &> /var/log/extra/sysctl"
      ignore_errors: true

    - shell: "netstat -lnp &> /var/log/extra/netstat"
      ignore_errors: true

    - shell: "which openstack-status &> /dev/null && (. ~/keystonerc_admin; openstack-status &> /var/log/extra/openstack-status)"
      when: "'controller' in inventory_hostname"
      ignore_errors: true

    - shell: "lsmod &> /var/log/extra/lsmod"
      ignore_errors: true

    - shell: "lspci &> /var/log/extra/lspci"
      ignore_errors: true

    - shell: "pip list &> /var/log/extra/pip"
      ignore_errors: true

    - shell: "(vgs; pvs; lvs) &> /var/log/extra/lvm"
      ignore_errors: true

    - name: generate human-readable SAR logs
      shell: "[[ -f /usr/lib64/sa/sa2 ]] && /usr/lib64/sa/sa2 -A"
      ignore_errors: true

    - name: collect logs
      shell: |
        mkdir -p /tmp/{{ inventory_hostname }};
        for F in $(ls -d1 /var/log/rpm.list /var/log/extra {{ job.archive|join(' ') }}); do
          cp -rpL --parents $F /tmp/{{ inventory_hostname }}
        done
        cd /tmp
        tar czf {{ inventory_hostname }}.tar.gz {{ inventory_hostname }}
      ignore_errors: true

    - name: fetch log archive (gzip)
      fetch: src=/tmp/{{ inventory_hostname }}.tar.gz flat=yes dest=../collected_files/{{ inventory_hostname }}.tar.gz
      ignore_errors: true
